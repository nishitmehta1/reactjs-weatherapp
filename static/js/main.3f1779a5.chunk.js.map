{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Component","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","api_call","data","_api_call","_data","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","cod","setState","main","temp","desc","weather","stop","_x","apply","arguments","state","components_Titles","components_Form","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f1779a5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './titles.css';\r\n\r\nclass Titles extends Component {\r\n\trender(){ \r\n\t  return (\r\n\t    <div>\r\n\t    \t<h1 className=\"title-container__title\">\r\n\t      \t\tWeather Search\r\n\t    \t</h1>\r\n\t    \t<h4 className=\"title-container__subtitle\">\r\n\t\t\t\t(Made using ReactJs)\r\n\t    \t</h4>\r\n\t    </div>\r\n\t  );\r\n\t}\r\n}\r\n\r\nexport default Titles;","import React from 'react';\r\nimport './form.css';\r\n\r\nconst Form = props => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t  <form onSubmit={props.getWeather}>\r\n\t\t\t<input type=\"text\" name=\"city\" placeholder=\"City\"/>\r\n\t\t\t<input type=\"text\" name=\"country\" placeholder=\"Country\"/>\r\n\t\t\t<button>Get Weather</button>\r\n\t\t  </form>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport './weather.css';\r\n\r\n\r\nconst Weather = props => {\r\n\treturn (\r\n\t\t<div className=\"weather__info\">\r\n\t\t  \t{\t\r\n\t\t\t \tprops.city && props.country && <p className=\"weather__key\"> Location: \r\n\t\t \t\t<span className=\"weather__value\"> { props.city }, { props.country }</span>\r\n\t\t\t \t</p> \r\n\t\t\t}\r\n\t\t\t{ \t\r\n\t\t\t \tprops.temperature && <p className=\"weather__key\"> Temperature: \r\n\t\t \t\t<span className=\"weather__value\"> { props.temperature }\t</span>\r\n\t\t\t \t</p> \r\n\t\t\t}\r\n\t\t\t{ \t\r\n\t\t\t \tprops.humidity && <p className=\"weather__key\"> Humidity: \r\n\t\t \t\t<span className=\"weather__value\"> { props.humidity } </span>\r\n\t\t\t \t</p> \r\n\t\t\t}\r\n\t\t\t{ \t\r\n\t\t\t \tprops.description && <p className=\"weather__key\"> Conditions: \r\n\t\t \t\t<span className=\"weather__value\"> { props.description } </span>\r\n\t\t\t </p> \r\n\t\t\t}\r\n\t\t\t{ \r\n\t\t\t\tprops.error && <p className=\"weather__error\">{ props.error }</p>  \r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Weather;","import React, { Component } from 'react';\nimport './App.css';\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst API_KEY = 'a7e02dcbcafc861fad98a10782f4b942';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      temperature: '',\n      city: '',\n      country: '',\n      humidity: '',\n      desc: '',\n      error: ''\n    }\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault()\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    if (city && country){\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}&units=metric`);\n      const data = await api_call.json();\n      if(data.cod===404){\n        this.setState({\n          error: 'Please enter a valid City and/or Country Name'\n        });\n      }\n      else{\n        this.setState({\n          temperature: data.main.temp,\n          city: data.name,\n          country: data.country,\n          humidity: data.main.humidity,\n          desc: data.weather[0].description,\n          error: ''\n        });\n      }\n    }\n    else if (city){\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&APPID=${API_KEY}&units=metric`);\n      const data = await api_call.json();\n      if(data.cod===404){\n        this.setState({\n          error: 'Please enter a valid City and/or Country Name'\n        });\n      }\n      else{\n        this.setState({\n          temperature: data.main.temp,\n          city: data.name,\n          country: '',\n          humidity: data.main.humidity,\n          desc: data.weather[0].description,\n          error: ''\n        });\n      }\n    }\n    else{\n      this.setState({\n        error: 'Please enter City and Country'\n      });\n    }\n  }\n\n  render(){\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Titles/>\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather}/>\n                  <Weather\n                    temperature={this.state.temperature} \n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    desc={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}